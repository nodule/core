{
  "name": "core",
  "description": "Core for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/core.git"
  },
  "dependencies": {
    "chix-flow": "^0.10.8"
  },
  "nodes": [
    {
      "dependencies": {
        "npm": {
          "chix-flow": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "actor": {
            "title": "Actor",
            "type": "Actor",
            "default": null
          },
          "loader": {
            "title": "Loader",
            "type": "Loader",
            "default": null
          },
          "io": {
            "title": "IO Handler",
            "type": "IOMapHandler",
            "default": null
          },
          "pm": {
            "title": "Process Manager",
            "type": "ProcessManager",
            "default": null
          }
        },
        "output": {
          "actor": {
            "title": "Actor",
            "type": "Actor"
          },
          "addNode": {
            "title": "Node added",
            "type": "xNode"
          },
          "removeNode": {
            "title": "Node removed",
            "type": "xNode"
          },
          "addLink": {
            "title": "Link added",
            "type": "xLink"
          },
          "removeLink": {
            "title": "Link removed",
            "type": "xLink"
          },
          "connect": {
            "title": "Link connected",
            "type": "xLink"
          },
          "disconnect": {
            "title": "Link disconnected",
            "type": "xLink"
          },
          "qm": {
            "title": "Queue Manager",
            "type": "QueueManager"
          },
          "pm": {
            "title": "Process Manager",
            "type": "ProcessManager"
          },
          "io": {
            "title": "Io Handler",
            "type": "IOMapHandler"
          },
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Exposing Actor"
      },
      "description": "Chix Actor",
      "title": "Actor",
      "ns": "core",
      "name": "actor",
      "fn": "output = function (cb) {\n\n  var actor = $.actor || this.getParent();\n\n  // probably should do almost the same as npmlog monitor\n\n  actor.on('inputRequired', function (val) {\n    cb({\n      error: $.create(val)\n    });\n  });\n\n  actor.on('error', function (val) {\n    cb({\n      error: $.create(val)\n    });\n  });\n\n  actor.on('addNode', function (event) {\n    cb({\n      addNode: $.create(event.node)\n    });\n  });\n\n  actor.on('removeNode', function (event) {\n    cb({\n      removeNode: $.create(event.node)\n    });\n  });\n\n  actor.on('addLink', function (link) {\n    cb({\n      addLink: $.create(link)\n    });\n  });\n\n  actor.on('removeLink', function (link) {\n    cb({\n      removeLink: $.create(link)\n    });\n  });\n\n  actor.ioHandler.on('connect', function (link) {\n    cb({\n      connect: $.create(link)\n    });\n  });\n\n  actor.ioHandler.on('disconnect', function (link) {\n    cb({\n      disconnect: $.create(link)\n    });\n  });\n\n  // useally the actor already started so we send what we have\n  // manually\n  Object.keys(actor.nodes).forEach(function(key) {\n    cb({addNode: $.create(actor.nodes[key])});\n  });\n\n  Object.keys(actor.links).forEach(function(key) {\n    cb({addLink: $.create(actor.links[key])});\n\n    // also report them all as connected for now\n    cb({connect: $.create(actor.links[key])});\n  });\n\n  cb({\n    io: $.create(actor.ioHandler),\n    pm: $.create(actor.processManager)\n  });\n\n  // not really useful I guess\n  /*\n  actor.ioHandler.on('data', function (link) {\n    cb({\n      disconnectLink: link\n    });\n  });\n  */\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Input object",
            "type": "any"
          },
          "args": {
            "title": "Arguments",
            "type": "array",
            "default": null
          },
          "method": {
            "title": "Method",
            "type": "string"
          }
        },
        "output": {
          "out": {
            "title": "Output",
            "type": "any"
          },
          "error": {
            "title": "Error",
            "type": "Error"
          }
        }
      },
      "phrases": {
        "active": "Calling method"
      },
      "description": "Calls a method with the args given",
      "title": "Call a method",
      "ns": "core",
      "name": "call",
      "fn": "output = function (cb) {\n  if ($.in[$.method]) {\n    cb({\n      out: $.write('in', $.in[$.method].call($.in, $.args))\n    });\n  } else {\n    cb({\n      error: $.create(new Error('No such input method ' + $.method))\n    });\n  }\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Input object",
            "type": "any",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "Output",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Polling data"
      },
      "description": "Polls an instance on request",
      "title": "Polling",
      "ns": "core",
      "name": "poll",
      "fn": "/**\n *\n * Idea is to use :start to trigger output.\n * In which case it just outputs the reference we have\n * In other words make the reference move and become active.\n * It can actually already be done with persist and start and\n * object/create.\n */\non.input.in = function (val) {\n};\n"
    }
  ],
  "twigs": []
}